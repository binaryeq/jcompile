package nz.ac.wgtn.shadedetector.jcompile.oracles;

import nz.ac.wgtn.shadedetector.jcompile.oracles.comparators.OpenJDKVersionsComparator;
import nz.ac.wgtn.shadedetector.jcompile.oracles.comparators.SemVerInJarFilenameComparator;
import org.apache.commons.lang3.tuple.Pair;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * Construct a negative oracle for jars, i.e. sets of jars that originate from different but similar source code (adjacent versions),
 * generated by the same compiler.
 * @author jens dietrich
 */
public class AdjacentVersionSameArtifactAndCompiler implements JarOracle {

    @Override
    public List<Pair<File, File>> build(File jarFolder) throws IOException {

        Map<String,Set<File>> jarsByBuildAndComponent = Utils.collectJarsByComponentAndBuild(jarFolder);
        List<Pair<File, File>> oracle = new ArrayList<>();
        SemVerInJarFilenameComparator comparator = new SemVerInJarFilenameComparator();

        for (String artifact:jarsByBuildAndComponent.keySet()) {
            List<File> differentVersion = jarsByBuildAndComponent.get(artifact).stream()
                .sorted(comparator)
                .collect(Collectors.toList());

            for (int i=1;i<differentVersion.size();i++) {
                oracle.add(Pair.of(differentVersion.get(i-1),differentVersion.get(i)));
            }
        }

        return oracle;
    }

    // for testing TODO: remove
    public static void main (String[] args) throws IOException {
        File jarFolder = new File(args[0]);
        List<Pair<File, File>> oracle = new AdjacentVersionSameArtifactAndCompiler().build(jarFolder) ;
        for (Pair<File, File> pair:oracle) {
            System.out.println(pair.getLeft().getAbsolutePath());
            System.out.println(pair.getRight().getAbsolutePath());
            System.out.println();
        }
        System.out.println("oracle size: " + oracle.size());

    }

}
