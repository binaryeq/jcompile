package nz.ac.wgtn.shadedetector.jcompile.oracles;

import nz.ac.wgtn.shadedetector.jcompile.oracles.comparators.CompilerVersionsComparator;
import nz.ac.wgtn.shadedetector.jcompile.oracles.comparators.ProjectToJDKMajorVersion;
import org.apache.commons.lang3.tuple.Pair;

import java.io.*;
import java.nio.file.Path;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import static nz.ac.wgtn.shadedetector.jcompile.oracles.Utils.sorted;

/**
 * Construct a positive oracle for jars, i.e. sets of jars that originate from the same source code,
 * but are generated by different compilers.
 * Based on SameArtifactDifferentCompilerJarOracle, except that the set of compiler pairs to use is parsed from
 * a GraphViz .dot file instead of using complicated version lookups and comparisons.
 *
 * NOTE: This method's main() must be called with a "full" path, i.e., "jars/EQ" not "jars".
 * @author Tim White
 */
public class SameArtifactDifferentCompilerFromDotJarOracle implements JarOracle {

    public static final String GRAPH_FILENAME = "/eq.dot";

    @Override
    public List<Pair<Path, Path>> build(Path jarFolder) throws IOException {
        Map<String, Set<Path>> jarsByCompilerUsed = Utils.collectJarsByCompilerUsed(jarFolder);
        MapDotLabelToJarPathPrefix labelMapper = new MapDotLabelToJarPathPrefix(jarsByCompilerUsed.keySet());
        List<Pair<Path, Path>> oracle = new ArrayList<>();

        Pattern pattern = Pattern.compile("(\\S+)\\s+--\\s+(\\S+);\\s*$");    // "abc_1_2_3 -- def_4_5_6;"

        try (InputStream is = SameArtifactDifferentCompilerFromDotJarOracle.class.getResourceAsStream(GRAPH_FILENAME);
             Reader reader = new InputStreamReader(is);
             BufferedReader br = new BufferedReader(reader)) {
            for (String line : br.lines().toList()) {
                Matcher matcher = pattern.matcher(line);
                if (matcher.find()) {
                    String compiler1 = labelMapper.lookup(matcher.group(1));
                    String compiler2 = labelMapper.lookup(matcher.group(2));
                    for (Path jarPath1 : jarsByCompilerUsed.get(compiler1)) {
                        Path jarPath2 = jarPath1.getParent().getParent().resolve(compiler2).resolve(jarPath1.getFileName());
                        if (jarsByCompilerUsed.get(compiler2).contains(jarPath2)) {
                            oracle.add(Pair.of(jarPath1, jarPath2));
                        }
                    }
                }
            }
        } catch (IOException e) {
            throw new RuntimeException("IO failure opening or reading from " + GRAPH_FILENAME + " resource file", e);
        }

        return oracle;
    }

    /**
     * Due to .dot file syntax limitations, we can't specify exact compiler prefix paths as labels. Instead, we take a
     * very simple approach: Simplify both compiler path prefixes and .dot file labels by removing all non-alphanumeric
     * characters, and then say that a label L maps to a compiler path prefix P if L is a prefix of P, and is not a
     * prefix of any other compiler path prefix.
     *
     * This may in general fail for some possible versions (abc-1.02 would collide with abc-10.2), but we don't
     * encounter those in practice -- and if that changes, our checks mean we would fail fast.
     */
    static class MapDotLabelToJarPathPrefix {
        List<Pair<String, String>> simplifiedCompilerNames;     // A Map wouldn't help as we also need prefix matching

        MapDotLabelToJarPathPrefix(Collection<String> compilerNames) {
            simplifiedCompilerNames = new ArrayList<>();
            Set<String> seen = new HashSet<>();
            for (String compilerName : compilerNames) {
                String simplified = simplify(compilerName);
                if (seen.contains(simplified)) {
                    throw new RuntimeException("Compiler name '" + compilerName + "' collides with existing compiler name after simplification to '" + simplified + "'!");
                }

                seen.add(simplified);
                simplifiedCompilerNames.add(Pair.of(simplified, compilerName));
            }
        }

        public String lookup(String dotFileVertexLabel) {
            String simplified = simplify(dotFileVertexLabel);

            List<Pair<String, String>> matches = simplifiedCompilerNames.stream().filter((Pair<String, String> p) -> p.getLeft().startsWith(simplified)).toList();
            if (matches.size() != 1) {
                throw new RuntimeException("Found " + matches.size() + " compiler names matching .dot file vertex label '" + dotFileVertexLabel + "' after simplification to '" + simplified + "'!");
            }

            return matches.get(0).getRight();
        }

        private static String simplify(String s) {
            return s.replaceAll("[^A-Za-z0-9]", "");
        }
    }

    // for testing TODO: remove
    public static void main (String[] args) throws IOException {
        Path jarFolder = Path.of(args[0]);
        List<Pair<Path, Path>> oracle = new SameArtifactDifferentCompilerFromDotJarOracle().build(jarFolder) ;
        for (Pair<Path, Path> pair:oracle) {
            System.out.println(pair.getLeft().toFile() + "\t" + pair.getRight().toFile());
        }

    }

}
