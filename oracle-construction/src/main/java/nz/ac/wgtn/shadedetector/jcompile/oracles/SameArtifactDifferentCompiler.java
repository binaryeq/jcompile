package nz.ac.wgtn.shadedetector.jcompile.oracles;

import nz.ac.wgtn.shadedetector.jcompile.oracles.comparators.OpenJDKVersionsComparator;
import org.apache.commons.lang3.tuple.Pair;

import java.io.File;
import java.io.IOException;
import java.util.*;
import java.util.stream.Collectors;

import static nz.ac.wgtn.shadedetector.jcompile.oracles.Utils.index;

/**
 * Construct a positive oracle for jars, i.e. sets of jars that originate from the same source code,
 * but are generated by different compilers.
 * @author jens dietrich
 */
public class SameArtifactDifferentCompiler implements JarOracle {

    @Override
    public List<Pair<File, File>> build(File jarFolder) throws IOException {

        Map<String,Set<File>> jarsByArtifact = Utils.collectJarsByArtifact(jarFolder);
        List<Pair<File, File>> oracle = new ArrayList<>();
        OpenJDKVersionsComparator versionComparator = new OpenJDKVersionsComparator();

        for (String artifact:jarsByArtifact.keySet()) {
            List<File> jarsSortedByCompilerVersion = jarsByArtifact.get(artifact).stream()
                .sorted((f1,f2) -> versionComparator.compare(Utils.COMPILER_USED.apply(f1),Utils.COMPILER_USED.apply(f2)))
                .collect(Collectors.toList());

            // instead of using all combinations, only use adjacent pairs
            for (int i=1;i<jarsSortedByCompilerVersion.size();i++) {
                oracle.add(Pair.of(jarsSortedByCompilerVersion.get(i-1),jarsSortedByCompilerVersion.get(i)));
            }
        }

        return oracle;
    }

    // for testing TODO: remove
    public static void main (String[] args) throws IOException {
        File jarFolder = new File(args[0]);
        List<Pair<File, File>> oracle = new SameArtifactDifferentCompiler().build(jarFolder) ;
        for (Pair<File, File> pair:oracle) {
            System.out.println(pair.getLeft().getAbsolutePath());
            System.out.println(pair.getRight().getAbsolutePath());
            System.out.println();
        }
        System.out.println("oracle size: " + oracle.size());

    }

}
