package nz.ac.wgtn.shadedetector.jcompile.oracles;

import org.apache.commons.lang3.tuple.Pair;
import java.io.IOException;
import java.net.URISyntaxException;
import java.nio.file.Path;
import java.util.List;

import static nz.ac.wgtn.shadedetector.jcompile.oracles.Utils.*;

/**
 * Construct a negative oracle for classes, i.e. sets of classes that originate from different but similar source code (adjacent versions),
 * generated by the same compiler.
 * @author jens dietrich
 */
public class AdjacentVersionSameArtifactAndCompilerClassOracle extends AbstractClassOracle {

    public AdjacentVersionSameArtifactAndCompilerClassOracle(boolean ignorePackageInfo, boolean ignoreAnonymousInnerClasses) {
        super(ignorePackageInfo, ignoreAnonymousInnerClasses);
    }

    public AdjacentVersionSameArtifactAndCompilerClassOracle() {
        super(true,true);
    }

    @Override
    public List<Pair<ZipPath, ZipPath>> build(Path jarFolder) throws IOException, URISyntaxException {

        List<Pair<Path,Path>> jarOracle = new AdjacentVersionSameArtifactAndCompilerJarOracle().build(jarFolder);
        return buildFromJarPairs(jarOracle);
    }

    //    // for testing TODO: remove
    public static void main (String[] args) throws IOException, URISyntaxException {
        Path jarFolder = Path.of(args[0]);
        List<Pair<ZipPath, ZipPath>> oracle = new AdjacentVersionSameArtifactAndCompilerClassOracle().build(jarFolder);
        System.out.println("container1\tcontainer2\tclass1\tclass2\tgenerated_by_1\tgenerated_by_2\tbytecode_jep181_1\tbytecode_jep181_2\tbytecode_jep280_1\tbytecode_jep280_2\tscope_1\tscope_2");
        for (Pair<ZipPath, ZipPath> paths : oracle) {
            System.out.println(paths.getLeft().outerPath() +
                    "\t" + paths.getRight().outerPath() +
                    "\t" + paths.getLeft().innerPath() +
                    "\t" + paths.getRight().innerPath() +
                    "\t" + paths.getLeft().generatedBy() +
                    "\t" + paths.getRight().generatedBy() +
                    "\t" + paths.getLeft().bytecodeFeatures().contains("JEP181") +
                    "\t" + paths.getRight().bytecodeFeatures().contains("JEP181") +
                    "\t" + paths.getLeft().bytecodeFeatures().contains("JEP280") +
                    "\t" + paths.getRight().bytecodeFeatures().contains("JEP280") +
                    "\t" + paths.getLeft().scope() +
                    "\t" + paths.getRight().scope());
        }
    }

}
